swagger: '3.0'
info:
  version: '0.1.0'
  title: User API
  description: An API managing users and teams
host: localhost:8080
basePath: /api
schemes:
  - http
securityDefinitions:
 Bearer:
  description: |
   For accessing the API a valid JWT token must be passed in all the queries in
   the 'Authorization' header.


   A valid JWT token is generated by the API and retourned as answer of a call
   to the route /auth giving a valid user & password.


   The following syntax must be used in the 'Authorization' header :

       Bearer: xxxxxx.yyyyyyy.zzzzzz
  type: apiKey
  name: Authorization
  in: header
paths:
  /users:
    post:
      description: create a user
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
        '422':
          description: Malformed user

    get:
      description: get the list of all users
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /users/{id}:
    get:
      description: get a specific User
      operationId: getUser
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: user's id
          schema:
            type: string
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/User'
    put:
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
        - application/json
      security:
          - Bearer: []
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: user's id
          schema:
            type: integer
        - in: body
          name: body
          description: The user you want update with.
          required: true
          schema:
           $ref: '#/definitions/NewUser'
      produces:
        - application/json
      responses:
        200:
          description: The user has been successfully updated.
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid user supplied
        404:
          description: User not found



  /auth:
    post:
      description: Athentificate an user
      operationId: auth
      consumes:
        - application/json
      parameters:
        - name: auth
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Token'


  /publicKey:
    get:
      description: get the public key
      operationId: getPublicKey
      produces:
        - text/plain
      responses:
        '200':
          description: success
          schema:
            type: string


definitions:
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      username:
        type: string
        minLength: 4
        pattern: '^[a-zA-Z0-9._-]+$'
      email:
        type: string
        pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
      password:
        type: string
        minLength: 6
      firstName:
        type: string
      lastName:
        type: string
      displayName:
        type: string
    required:
        - username
        - email
        - password
  NewUser:
    type: object
    properties:
      email:
        type: string
        pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
      password:
        type: string
        minLength: 6
      firstName:
        type: string
      lastName:
        type: string
      displayName:
        type: string
      required:
        - email
        - password
  DisplayUser:
     type: object
     properties:
       username:
         type: string
         minLength: 4
         pattern: '^[a-zA-Z0-9._-]+$'
       email:
         type: string
         pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
       firstName:
         type: string
       lastName:
         type: string
       displayName:
         type: string

  Credentials:
    type: object
    properties:
      identifier:
        type: string
        description: 'username or email'
      password:
        type: string
    required:
        - identifier
        - password

  Token:
      type: object
      properties:
        token:
          type: string